name: ci

on:
  push:
    branches:
      - main
  pull_request:
    types: [opened, synchronize, reopened]
    branches:
      - main

jobs:
  analyze:
    name: CodeQL Analyze Job
    runs-on: ${{ (matrix.language == 'swift' && 'macos-latest') || 'ubuntu-latest' }}
    timeout-minutes: ${{ (matrix.language == 'swift' && 120) || 360 }}
    permissions:
      actions: read
      contents: read
      security-events: write
      pull-requests: write # allows analyzer to comment on PRs

    # Execute this job upon pushes to the default branch or
    # PRs into the default branch that are not closed.
    if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.action != 'closed')

    strategy:
      fail-fast: false
      matrix:
        language: ["csharp"]
        # CodeQL supports [ 'cpp', 'csharp', 'go', 'java', 'javascript', 'python', 'ruby', 'swift' ]
        # Use only 'java' to analyze code written in Java, Kotlin or both
        # Use only 'javascript' to analyze code written in JavaScript, TypeScript or both
        # Learn more about CodeQL language support at https://aka.ms/codeql-docs/language-support

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      # Initializes the CodeQL tools for scanning.
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: ${{ matrix.language }}
          # If you wish to specify custom queries, you can do so here or in a config file.
          # By default, queries listed here will override any specified in a config file.
          # Prefix the list here with "+" to use these queries and those in the config file.

          # For more details on CodeQL's query packs, refer to: https://docs.github.com/en/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/configuring-code-scanning#using-queries-in-ql-packs
          # queries: security-extended,security-and-quality
          queries: security-and-quality

      # Autobuild attempts to build any compiled languages (C/C++, C#, Go, Java, or Swift).
      # If this step fails, then you should remove it and run the build manually (see below)
      - name: Autobuild
        uses: github/codeql-action/autobuild@v2

      # ℹ️ Command-line programs to run using the OS shell.
      # 📚 See https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_idstepsrun

      #   If the Autobuild fails above, remove it and uncomment the following three lines.
      #   modify them (or add more) to build your code if your project, please refer to the EXAMPLE below for guidance.

      # - run: |
      #     echo "Run, Build Application using script"
      #     ./location_of_script_within_repo/buildscript.sh

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2
        with:
          category: "/language:${{matrix.language}}"

  compile:
    name: Compile
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: ./src

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 7.0.x

      - name: Build
        run: dotnet build --configuration Release

  tag-release-and-publish:
    name: "Tag, Release and Publish"
    needs: [analyze, compile]
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    permissions:
      contents: write

    defaults:
      run:
        working-directory: ./src

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Bump version and push tag
        id: tag_version
        uses: mathieudutour/github-tag-action@v6.1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set TAG_NAME Environment Variable
        run: |
          TAG_NAME="${{ steps.tag_version.outputs.new_version }}"
          echo "TAG_NAME=$TAG_NAME" >> $GITHUB_ENV

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 7.0.x

      - name: Build and Pack
        run: |
          dotnet build --configuration Release /p:Version=$TAG_NAME /p:AssemblyVersion=$TAG_NAME /p:FileVersion=$TAG_NAME
          dotnet pack --configuration Release /p:PackageVersion=$TAG_NAME /p:Version=$TAG_NAME /p:AssemblyVersion=$TAG_NAME /p:FileVersion=$TAG_NAME --output nupkgs

      - name: Push NuGet Package
        run: |
          dotnet nuget push ./nupkgs/*.nupkg --api-key ${{ secrets.NUGET_API_KEY }} --source https://api.nuget.org/v3/index.json

      - name: Archive Build Outputs
        run: |
          tar -C $(pwd)/Jpfulton.AzureAuditCli/bin/Release/net7.0/ -czvf ./azure-audit-cli.binaries.${TAG_NAME}.tar.gz .
          zip -j azure-audit-cli.binaries.${TAG_NAME}.zip ./Jpfulton.AzureAuditCli/bin/Release/net7.0/*

      - name: Create a GitHub release
        uses: ncipollo/release-action@v1
        with:
          generateReleaseNotes: true
          tag: ${{ steps.tag_version.outputs.new_tag }}
          name: Release ${{ steps.tag_version.outputs.new_tag }}
          body: ${{ steps.tag_version.outputs.changelog }}
          artifacts: "./src/*.tar.gz, ./src/*.zip, ./src/nupkgs/*.nupkg"
